#!/bin/bash

## TODO: - deploy to another machine, possibly via docker-machine
##       - set up namespaced filesystem mounts for db storage

# Some globals for now.
HOST=localhost
NET=gem-net
PORT=1234

# Fail and exit with a message.
# Usage: err "oh noes"
err() {
  log "ERROR: $1"
  exit 1
}

# Warn with a message.
# Usage: warn "uhh"
warn() {
  log "WARNING: $1"
}

# Log a message.
# Usage: log "herro"
log() {
  echo "[gemctl] $1"
}

# Log a TODO item.
# Usage: todo "do something else here"
todo() {
  log "TODO: $1"
}

# Create a new Postgres container with the specified deployment number.
# Usage: createDatabaseContainer <int>
createDatabaseContainer() {
  log "Deploying Postgres container db-$1."
  docker run --detach                       \
             --net=$NET                     \
             --label gemini.db              \
             --label gemini.deploy=$1       \
             --label gemini.commit=$VERSION \
             --name db-$1                   \
             --health-cmd "psql -U postgres -d gem -c 'select 1'" \
             --health-interval 10s          \
             --health-retries 2             \
             --health-timeout 2s            \
             $POSTGRES_IMAGE   > /dev/null
   if [ $? -ne 0 ]; then
     err "Failed to create container ($?)."
   fi
}

# Create the `gem` database on the Postgres container with the specified deployment number. Since
# this is called immediately after `createDatabaseContainer` we include code to retry if the
# database isn't up yet.
# Usage: createDatabase <int>
createDatabase() {
  log "Creating database."
  count=1
  retries=10 # seconds
  until [ $count -eq $retries ] || docker exec db-$1                                \
                    psql --host=db-$1                    \
                         --command='create database gem' \
                         --username=postgres  &> /dev/null
  do
    count=$((count + 1))
    sleep 0.5
  done
  if [ $count -eq $retries ]; then
    err "Timed out (re)trying to create database."
  fi
}

# Create a new Gem container with the specified deployment number, exposing the telnet port as
# localhost port 1234. Note that the server will fail to start if the port is in use; there can
# only be one running Gem container at a time.
# Usage: gem <deploy-id>
createGemContainer() {
  log "Creating Gem container gem-$1."
  docker run --detach                                     \
             --tty                                        \
             --interactive                                \
             --net=$NET                                   \
             --label gemini.gem                           \
             --label gemini.deploy=$1                     \
             --label gemini.commit=$VERSION               \
             --name gem-$1                                \
             --publish $PORT:6666                         \
             --env GEM_DB_URL=jdbc:postgresql://db-$1/gem \
             gem-telnetd:$VERSION > /dev/null
  if [ $? -ne 0 ]; then
    err "Failed to create container ($?)."
  fi
  #  port=$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "6666/tcp") 0).HostPort }}' gem-$1)
  port=$PORT
  log "Telnet is exposed on $port."
}

# Stop (if needed) and remove all containers. This is just for development really; it's very
# destructuve.
# Usage: clean
clean() {
  todo "prompt for confirmation."
  log "Stopping and removing all containers."
  docker stop $(docker ps -a -q) &> /dev/null
  docker rm   $(docker ps -a -q) &> /dev/null
}

verifyOrCreateGemNet() {
  id=$(docker network ls -q --filter name=gem-net)
  if [ -z $id ]; then
    log "Creating gem-net bridge network."
    docker network create gem-net > /dev/null
    if [ $? -ne 0 ]; then
      err "Unable to create gem-net bridge network."
    fi
  fi
}

# Perform an "initial" deployment which will have deployment ID 1. This assumes you have already
# checked to be sure there are no other deployments here.
# Usage: deployInitial
deployInitial() {
  log "This is the first deployment on $HOST."
  createDatabaseContainer 1
  createDatabase 1
  createGemContainer 1
  todo "Import existing data. We will need a mount point and machinery for this."
  verify 1
}

# Copy data from `oldDb` to `newDb`.
# Usage: copyDatabase old new
copyDatabase() {
  log "Copying data from previous deployment."
  docker exec $2 sh -c "pg_dump -h $1 -U postgres gem | psql -q -U postgres -d gem" > /dev/null
  if [ $? -ne 0 ]; then
    err "Failed to copy data ($?)."
  fi
}

# Stop the given container.
# Usage: stop id
stop() {
  log "Stopping container $1."
  docker stop $1 &> /dev/null
  if [ $? -ne 0 ]; then
    err "Failed to stop container ($?)."
  fi
}

# Echo the container IDs of database containers with the given label, both running and stopped.
# Usage: ids=($(containersWithLabel gemini.db))
containersWithLabel() {
  echo $(docker ps -q -a --filter label=$1)
}

# Echo the maximum deployment ID for the given container IDs.
# Usage: max=$(maxDeployId 876 809 233)
#        max=$(maxDeployId ${ids[*]})
maxDeployId() {
  arr=($(docker inspect --format "{{ index .Config.Labels \"gemini.deploy\"}}" $@ 2> /dev/null))
  current=${arr[0]}
  for n in "${arr[@]}" ; do
      ((n > current)) && current=$n
  done
  echo $current
}

# Show some information about deployed containers.
# Usage: ps
ps() {
  docker inspect \
         --format "{{ index .Config.Labels \"gemini.deploy\"}}{{ .Name }} {{ .State.Status }}" \
         $(docker ps -a -q --filter label=gemini.deploy) 2> /dev/null \
    | sort
}

# Verify that there is exactly one running database container for the given deployment, and that
# it is responding to requests. Returns 0 on success, nonzero otherwise.
# Usage: verifyDb 123
verifyDb() {
  # IDs of running database containers for the given deployment. There should be exactly 1.
  rids=($(docker ps -q --filter label=gemini.db --filter label=gemini.deploy=$1))
  case ${#rids[@]} in
    0)  warn "Cannot find a running database for deployment $1. There should be exactly one."
        return 1
        ;;
    1)  status="starting"
        until [ "$status" != "starting" ]
        do
          sleep 0.5
          status=$(docker inspect -f "{{ .State.Health.Status }}" db-$1)
        done
        if [ "$status" = "healthy" ]; then
          log "Deployment $1 database status: $status"
        else
          err "Deployment $1 database status: $status"
        fi
        ;;
    *) warn "Found ${#rids[@]} running databases for deployment $1. There should be exactly one."
       return 1
       ;;
  esac
}

# Verify that we can connect to Gem on the well-known telnet port. Returns 0 on success, nonzero
# otherwise. This should turn into a robust health check.
# Usage: verifyGem 123
verifyGem() {
  nc -z localhost $PORT &> /dev/null
  if [ $? -ne 0 ]; then
    warn "Gem telnet port for deployment $1 is not available."
    return 1
  fi
  log "Deployment $1 Gem server looks ok."
}

# Verify the health of the given deployment, returning 0 if everything is ok, otherwise nonzero.
# Usage: verify 42
verify() {
  log "Verifying deployment $1."
  verifyDb $1
  if [ $? -ne 0 ]; then
    return 1
  fi
  verifyGem $1
}

verifyGemImage() {
  id=$(docker images -q gem-telnetd:$VERSION)
  if [ -z $id ]; then
    err "Could not find gem-telnetd:$VERSION image. You may need to do 'sbt docker:publishLocal'."
  fi
}

verifyDocker() {
  docker ps &> /dev/null
  if [ $? -ne 0 ]; then
    err "Docker isn't installed or isn't running. Download at https://www.docker.com/"
  fi
}

# Show a usage messsage.
# Usage: usage
usage() {
  echo
  echo "Gem control thingy. This script knows how to deploy Gem via docker on localhost. It will"
  echo "eventually be able to do this on remote hosts, and will do so automatically as part of"
  echo "continuous integration."
  echo
  echo "This assume you have done 'sbt docker:publishLocal' and have an image available."
  echo
  echo "Usage: gemctl <command>"
  echo "  clean               Stop and remove all containers."
  echo "  deploy [<commit>]   Deploy a new version of gem on localhost at the specified commit, or"
  echo "                      at the current HEAD with local changes."
  echo "  ps                  Show some information on containers."
  echo "  rm <id>             Stop and remove the specified deployment."
  echo "  rollback            Stop end remove the current deployment and restart the previous one."
  echo
}

setCommit() {
  if [ -z $1 ]; then
    log "No deploy commit specified, assuming local working version."
    COMMIT=$(git rev-parse HEAD 2> /dev/null)
    if [ $? -ne 0 ]; then
      err "Can't determine current Git hash. Are you in the right directory?"
    fi
  else
    # Try to find the requested commit in the log.
    git log -n 1 --pretty=oneline $1 &> /dev/null
    if [ $? -ne 0 ]; then
      err "Commit $1 was not found."
    fi
    COMMIT=$1
  fi
  log "Deploy commit is $(git rev-parse --short $COMMIT)."
}

setVersion() {
  if [ -z $1 ]; then
    local delta=$(git status -s)
    if [ -z "$delta" ]; then
      log "No uncommitted changes. This is a normal deployment."
      SNAPSHOT=0
      VERSION=$COMMIT
    else
      log "Found uncommitted changes. This is a SNAPSHOT deployment."
      SNAPSHOT=1
      VERSION="$COMMIT-SNAPSHOT"
    fi
  else
    VERSION=$1
  fi
  log "Gem image is $VERSION."
}

# Set POSTGRES_IMAGE to the correct value at commit COMMIT.
setPgImage() {
  if [ -z $SNAPSHOT ]; then
    POSTGRES_IMAGE=$(
      git show $COMMIT:pg-image.txt | \
      grep -v '^[[:space:]]*$'      | \
      grep -v '^#'
    )
    if [ $? -ne 0 ]; then
      err "Couldn't find 'pg-image.txt' at the specified commit."
    fi
  else
    POSTGRES_IMAGE=$(
      cat pg-image.txt | \
      grep -v '^[[:space:]]*$'      | \
      grep -v '^#'
    )
    if [ $? -ne 0 ]; then
      err "Couldn't find 'pg-image.txt' in working directory."
    fi
  fi
  if [ -z POSTGRES_IMAGE ]; then
    err "Could not determine database image from 'pg-image.txt' at specified commit."
  else
    log "Postgres image is $POSTGRES_IMAGE."
  fi
}

deploy() {

  # There will only be one running Gem server and it must be an ancestor of $VERSION
  # otherwise we can't deploy. However if there is no running gem version we need to
  # *find* the most recent one, which we can do by sorting them by commit date with
  #
  #   git show -s --format=%at <commit>
  #
  # There can be at most one SNAPSHOT deployment, and it must be current. It is not
  # possible to upgrade from a SNAPSHOT, only to replace or roll it back. SNAPSHOT
  # deployments are only allowed on localhost.
  #
  # We need a way to identify the current *production* deployment because that's
  # usually what we want to be developing against. There may be a bunch of intervening
  # commits but the upgrade needs to target the production "tip". What if we tag each
  # commit as it's deployed to production with some kind of recognizable pattern.
  # This way we can find it via
  #
  #   git describe --match <pat> --abbrev=0
  #
  # The initial deployment must have such a tag. Rolling back a production deployment
  # must also remove the tag.


  # Find the last production deployment
  log "No base commit specified. Using most recent deploy-* tag."
  tag=$(git describe --match deploy-* --abbrev=0)
  base=$(git rev-list -n 1 $tag)
  log "Base commit is $(git rev-parse --short $base)."

  # Determine the version we wish to deploy
  setCommit $1
  setVersion $1

  # There may be nothing to do.
  log "$base"
  log "$VERSION"
  if [ "$base" = "$VERSION" ]; then
    log "Base and deploy commits are identical. Nothing to do."
    exit 0
  fi


  setPgImage

  # Make sure prerequisites are available
  verifyOrCreateGemNet
  verifyGemImage



  # # Get the ids, total, and current/next deployment number
  # ids=($(containersWithLabel gemini.deploy))
  # total=${#ids[@]}
  # current=$(maxDeployId ${ids[*]})
  # next=$((current + 1))
  #
  # # initial or update
  # if [ $total -eq 0 ]; then
  #   deployInitial
  # else
  #
  #   log "Previous deployment was $current. This will be deployment $next."
  #
  #   todo "Verify that previous deployment is an ancestor of current deployment."
  #   # git merge-base --is-ancestor prev next
  #   #   will exit with 0 if true, 1 if false, 128 on error
  #
  #   todo "Don't deploy if current and next are identical non-snapshot versions."
  #
  #   # Make sure current deployment is healthy
  #   verify $current
  #   if [ $? -ne 0 ]; then
  #     err "Previous deployment ($current) is not available."
  #   fi
  #
  #   # Ready to deploy new one
  #   createDatabaseContainer $next
  #   createDatabase $next
  #   copyDatabase db-$current db-$next
  #   stop db-$current
  #   stop gem-$current
  #   createGemContainer $next
  #   verify $next
  #
  # fi

}


# We can't really do anythig unless Docker is available
verifyDocker

case $1 in
  "ps")       ps;;
  "clean")    clean;;
  "deploy")   deploy $2;;
  "rm")       err "Not implemented yet.";;
  "rollback") err "Not implemented yet.";;
  *)          usage;;
esac
